
New commit detected:
Hash: 120e7b23716f382bc47a8aa948a976fb3c57457c
Autor: gabriel <gabrieldev131@gmail.com>
Date: 2025-06-12 13:54:25-03:00
Mensage: go
changes files:

[UNDEFINED] Aluno.cs
@@ -0,0 +1,18 @@
+namespace WebAluno {
+    
+    public class Aluno
+    {
+        public int? Id { get; set; }
+        public string? Nome { get; set; }
+        public string? Endereco { get; set; }
+
+        public Aluno() { }
+        
+        public Aluno(int id, string nome, string endereco)
+        {
+            Id = id;
+            Nome = nome;
+            Endereco = endereco;
+        }
+    }
+}
\ No newline at end of file


[UNDEFINED] Disciplina.cs
@@ -0,0 +1,17 @@
+namespace WebDisciplina {   
+    public class Disciplina
+    {
+        public int? Id { get; set; }
+        public string? Nome { get; set; }
+        public string? Descricao { get; set; }
+
+        public Disciplina() { }
+        
+        public Disciplina(int id, string nome, string descricao)
+        {
+            Id = id;
+            Nome = nome;
+            Descricao = descricao;
+        }
+    }
+}
\ No newline at end of file


[UNDEFINED] EscolaService.cs
@@ -0,0 +1,79 @@
+using System;
+using System.Collections.Generic;
+using System.Net.Http;
+using System.Threading.Tasks;
+using Newtonsoft.Json;
+using WebAluno;
+using WebDisciplina;
+
+namespace WebEscolaService {
+    public class EscolaService
+    {
+        private static EscolaService? _instance;
+        private static readonly object _lock = new object(); // Para garantir segurança em multithread
+        private static readonly string BaseUrl = "http://localhost:3000/";
+        private static HttpClient? _httpClient;
+
+        // Construtor privado para impedir a criação direta de instâncias
+        private EscolaService()
+        {
+            _httpClient = new HttpClient();
+        }
+
+        // Método para obter a única instância (Singleton)
+        public static EscolaService GetInstance()
+        {
+            if (_instance == null)
+            {
+                lock (_lock)  // Garantir que uma única instância seja criada em um ambiente multithread
+                {
+                    if (_instance == null)
+                    {
+                        _instance = new EscolaService();
+                    }
+                }
+            }
+            return _instance;
+        }
+
+        // Método para obter a lista de alunos
+        public async Task<List<Aluno>?> ObterAlunosAsync()
+        {
+            try
+            {
+                _httpClient = new HttpClient();
+                HttpResponseMessage response = await _httpClient.GetAsync($"{BaseUrl}alunos");
+                response.EnsureSuccessStatusCode();
+
+                string jsonResponse = await response.Content.ReadAsStringAsync();
+                List<Aluno>? alunos = JsonConvert.DeserializeObject<List<Aluno>>(jsonResponse);
+                return alunos;
+            }
+            catch (Exception ex)
+            {
+                Console.WriteLine($"Erro ao obter alunos: {ex.Message}");
+                return null;
+            }
+        }
+
+        // Método para obter a lista de disciplinas
+        public async Task<List<Disciplina>?> ObterDisciplinasAsync()
+        {
+            try
+            {
+                _httpClient = new HttpClient();
+                HttpResponseMessage response = await _httpClient.GetAsync($"{BaseUrl}disciplinas");
+                response.EnsureSuccessStatusCode();
+
+                string jsonResponse = await response.Content.ReadAsStringAsync();
+                List<Disciplina>? disciplinas = JsonConvert.DeserializeObject<List<Disciplina>>(jsonResponse);
+                return disciplinas;
+            }
+            catch (Exception ex)
+            {
+                Console.WriteLine($"Erro ao obter disciplinas: {ex.Message}");
+                return null;
+            }
+        }
+    }
+}
\ No newline at end of file


[UNDEFINED] XmlService.cs
@@ -0,0 +1,68 @@
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Xml.Serialization;
+using WebRequestDto;
+using WebAluno;
+using WebDisciplina;
+
+namespace WebXmlService {
+    public class XmlService
+    {
+        // Método para salvar a lista de alunos em um arquivo XML
+        public void SalvarAlunosEmXml(RequestAlunoXmlDto requestAluno)
+        {
+            try
+            {
+                if (string.IsNullOrEmpty(requestAluno.CaminhoArquivo))
+                {
+                    throw new ArgumentException("O caminho do arquivo não pode ser nulo ou vazio.", nameof(requestAluno.CaminhoArquivo));
+                }
+                // Serializador para a lista de Alunos
+                XmlSerializer serializer = new(typeof(List<Aluno>));
+
+                // Usar o caminho do arquivo fornecido pelo objeto requestAluno
+                using (StreamWriter writer = new(requestAluno.CaminhoArquivo))
+                {
+                    // Serializando a lista de alunos
+                    serializer.Serialize(writer, requestAluno.Alunos);
+                }
+
+                Console.WriteLine($"Arquivo XML de alunos salvo em: {requestAluno.CaminhoArquivo}");
+            }
+            catch (Exception ex)
+            {
+                Console.WriteLine($"Erro ao salvar alunos em XML: {ex.Message}");
+            }
+        }
+
+        // Método para salvar a lista de disciplinas em um arquivo XML
+        public void SalvarDisciplinasEmXml(RequestDisciplinaXmlDto requestDisciplina)
+        {
+            try
+            {
+                if (string.IsNullOrEmpty(requestDisciplina.CaminhoArquivo))
+                {
+                    throw new ArgumentException("O caminho do arquivo não pode ser nulo ou vazio.", nameof(requestDisciplina.CaminhoArquivo));
+                }
+
+                // Serializador para a lista de Disciplinas
+                XmlSerializer serializer = new(typeof(List<Disciplina>));
+                
+                // Usar o caminho do arquivo fornecido pelo objeto requestDisciplina
+                using (StreamWriter writer = new(requestDisciplina.CaminhoArquivo))
+                {
+                    // Serializando a lista de disciplinas
+                    serializer.Serialize(writer, requestDisciplina.Disciplina);
+                }
+                
+                Console.WriteLine($"Arquivo XML de disciplinas salvo em: {requestDisciplina.CaminhoArquivo}");
+            }
+            catch (Exception ex)
+            {
+                Console.WriteLine($"Erro ao salvar disciplinas em XML: {ex.Message}");
+            }
+        }
+
+    }
+}
\ No newline at end of file

============================================================
